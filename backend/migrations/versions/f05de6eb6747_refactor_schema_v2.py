"""refactor schema v2

Revision ID: f05de6eb6747
Revises: d986f2a8ed5d
Create Date: 2025-09-16 20:25:48.312432

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f05de6eb6747'
down_revision: Union[str, None] = 'd986f2a8ed5d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('form',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_version_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('mode', sa.String(), server_default='fixed', nullable=False),
    sa.Column('item_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('length_target', sa.Integer(), nullable=True),
    sa.Column('time_limit_sec', sa.Integer(), nullable=True),
    sa.CheckConstraint("mode IN ('fixed','adaptive')", name='ck_form_mode'),
    sa.ForeignKeyConstraint(['test_version_id'], ['test_version.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_id'), 'form', ['id'], unique=False)
    op.create_table('norms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_version_id', sa.Integer(), nullable=True),
    sa.Column('locale', sa.String(), nullable=True),
    sa.Column('cohort_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('method', sa.String(), server_default='empirical', nullable=False),
    sa.Column('percentiles', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint("method IN ('empirical','gaussian')", name='ck_norms_method'),
    sa.ForeignKeyConstraint(['test_version_id'], ['test_version.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_norms_id'), 'norms', ['id'], unique=False)
    op.create_foreign_key(None, 'dimension', 'dimension', ['disintegration_target'], ['code'])
    op.create_foreign_key(None, 'dimension', 'dimension', ['integration_target'], ['code'])
    op.alter_column('facet', 'dimension_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.add_column('item', sa.Column('locale', sa.String(), nullable=True))
    op.alter_column('item', 'test_version_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('item', 'reverse_scored',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('item', 'response_scale',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('item', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('item_param', 'item_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('item_param', 'model',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('item_param', 'weight',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('item_param', 'a',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('item_param', 'b',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('response', sa.Column('shown_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('response', sa.Column('submitted_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.drop_constraint('response_session_id_fkey', 'response', type_='foreignkey')
    op.create_foreign_key(None, 'response', 'session', ['session_id'], ['id'], ondelete='CASCADE')
    op.add_column('score_profile', sa.Column('theta', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('score_profile', sa.Column('theta_se', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('score_profile', 'raw_sum',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'normalized',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'wing_distribution',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'health',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'integration',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'disintegration',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'center_scores',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'subtypes',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'validity',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint('score_profile_session_id_fkey', 'score_profile', type_='foreignkey')
    op.create_foreign_key(None, 'score_profile', 'session', ['session_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'score_profile', 'dimension', ['main_type'], ['code'])
    op.add_column('test_version', sa.Column('locales_supported', sa.String(), nullable=True))
    op.alter_column('test_version', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('test_version', 'scoring_model',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('test_version', 'scoring_model',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('test_version', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('test_version', 'locales_supported')
    op.drop_constraint(None, 'score_profile', type_='foreignkey')
    op.drop_constraint(None, 'score_profile', type_='foreignkey')
    op.create_foreign_key('score_profile_session_id_fkey', 'score_profile', 'session', ['session_id'], ['id'])
    op.alter_column('score_profile', 'validity',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'subtypes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'center_scores',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'disintegration',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'integration',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'health',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'wing_distribution',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'normalized',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('score_profile', 'raw_sum',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_column('score_profile', 'theta_se')
    op.drop_column('score_profile', 'theta')
    op.drop_constraint(None, 'response', type_='foreignkey')
    op.create_foreign_key('response_session_id_fkey', 'response', 'session', ['session_id'], ['id'])
    op.drop_column('response', 'submitted_at')
    op.drop_column('response', 'shown_at')
    op.alter_column('item_param', 'b',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('item_param', 'a',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('item_param', 'weight',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('item_param', 'model',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('item_param', 'item_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('item', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('item', 'response_scale',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('item', 'reverse_scored',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('item', 'test_version_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('item', 'locale')
    op.alter_column('facet', 'dimension_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'dimension', type_='foreignkey')
    op.drop_constraint(None, 'dimension', type_='foreignkey')
    op.drop_index(op.f('ix_norms_id'), table_name='norms')
    op.drop_table('norms')
    op.drop_index(op.f('ix_form_id'), table_name='form')
    op.drop_table('form')
    # ### end Alembic commands ###
